Original input tensor: 84x84x1 = 7,056 bytes

RAM = 2,048 bytes
RAM layer 2 = 573,440 bytes

Types of data:
    Integers
    Signed Integers
    Bitmaps
    Status values

Layer 1: 2048
    1D byte representation of RAM (ByteTensor)

    + torch.nn.RReLU
    + Batch Normalization

Layer 2-6: 2048x280
    torch.stack(
        8L Copy   of Layer 1  ( torch.view + mm(1/255) ) * 8
        8L Copy   of Layer 1  ( convert to signed + mm(1/255) ) * 8
        Bitmap    of Layer 1  ( torch.bitand(a, $bit) for 2**0-7 )
        Value map of Layer 1  ( torch.eq(a, $val) for 0-255 )
    )

    + Conv2d with 8x8 kernels, 4x4 strides, 4x8 padding
    + Batch Normalization
    + torch.nn.RReLU

    + Conv2d with 4x4 kernels, 2x2 strides, 2x4 padding
    + Batch Normalization
    + torch.nn.RReLU

    + Conv2d with 2x2 kernels, 1x1 strides, 1x2 padding
    + Batch Normalization
    + torch.nn.RReLU

    + Conv2d with 1x1 kernels, 1x1 strides, no padding
    + Batch Normalization
    + torch.nn.RReLU

Layer 7-?:
    nn.LSTM(
        hidden_size ??
        num_layers  2 but growing
        dropout     0.5 (recommended level for RNNs)
        batch_first ??
    )

Last Layer: 2048
    Fully-connected layer??? to outputs
    (convolute to outputs instead?)

--------------------

lua_engine wishlist:

    [DONE!] Full stack traces for "Lua thread bombed out"
        https://stackoverflow.com/questions/12256455/print-stacktrace-from-c-code-with-embedded-lua

    [DONE!] getemuscreen for gui.gdscreenshot
        XBackBuf already accessible (uint8 *buf = &XBuf)
    string memory.readfullrange (if readbyterange is too slow)
        ??? readfunc ARead; might be too low-level...

    [DONE!] Fix print to not do extra \r\n

    [DONE!] rom.getfilename
        FileBase

    Movie commands:
        [Needs Testing, docs] movie.play(string filename, bool read_only, int pauseframe)
            FCEUI_LoadMovie(const char *fname, bool _read_only, int _pauseframe)

        [docs] movie.record(string filename, int flags, string author)
            FCEUI_SaveMovie(const char *fname, EMOVIE_FLAG flags, std::wstring author)

            Flags = FROM_POWERON, FROM_SAVERAM, NONE (partial movie)

        movie.getinfo?
            FCEUI_MovieGetInfo(FCEUFILE* fp, MOVIE_INFO& info, bool skipFrameCount)

        movie.savebackup?
            FCEUI_MakeBackupMovie(bool dispMessage)

    [DONE!] Add docs to rom.gethash

    --novideo option (SDL Xwindow NULL interface?)

--------------------

Other DQN improvements:

    * [DONE!] Use speed run movie data as training examples
    * [DONE!] Run through entire speed run movies as training data in the beginning
    * Actrep should get smaller and smaller (every 500K steps, for example)
    * Save movies, for both example runs and fast runs
    * Split up NN into levels (might be still too hard for 8-4)
    * torch.load should load more data than just agent.network
    * Gamma discount should probably be weighted against history
    * Make sure networks are competing for time/reward/whatever
    * Add adrenaline for dangerous gameplay:
        * Use 4 different savestates (1/10/100/1000 frames back) to revert back to while in "death spiral"
            * savestate.object each frame
            * For each granularity, keep track of 10 separate savestates (1 has each frame, 10 has 10 for every 10 frames, etc.)
            * For each granularity, check C-S>=G+PG (C=current frame, S=savestate frame, G=granularity, PG=next lower G)
            * If so, then grab the oldest PG savestate and use it for the newest G savestate
            * Savestates are only created/saved outside of the death spiral, and only loaded inside of it
        * Add greater reward for being close to a death spiral frame point
        * Actually hitting death still incurs a penalty
    * Add forward-seeking code to calculate adrenaline score, while outside of death spiral
        * Save state, advance frame up to 8 frames with current action (or no action, or both?) to see if death occurs
        * Important for human training, since death is never actually encountered, but needs to be taught as "death-defying"

